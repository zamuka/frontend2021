################################ Agenda ################################

* Links #######################################################
  * https://learn.javascript.ru/intro
  * https://learn.javascript.ru/devtools
  * https://learn.javascript.ru/variables
  * https://learn.javascript.ru/data-types
  * https://learn.javascript.ru/structure#kommentarii
  * https://learn.javascript.ru/coding-style
  * https://learn.javascript.ru/type-conversions
  * https://learn.javascript.ru/ifelse
  * https://learn.javascript.ru/while-for
  * https://en.wikipedia.org/wiki/Factorial
  * https://learn.javascript.ru/object
  * https://learn.javascript.ru/array

* Git #########################################################
  * Commands
    * git rm
    * git add
    * git init
    * git push
    * git pull
    * git merge
    * git clone
    * git status
    * git commit
    * git branch
    * git remote
    * git checkout
    * gti reset --hard
  * .gitignore

* Bash ########################################################

* JavaScript ##################################################
  * Intro
  * Devtools
  * Variables
        * var
        * let
        * const
  * Data types
        * Strings
            * Different Ticks
                * " "
                * ' '
                * ` ${}`
            * Special characters
                * \n
                * \t
                * \uXXXX
                * \u{XXXXX}
            * Properties
                * .length
            * Methods
                * .trim()
                * .repeat()
                * .charAt()
                * .indexOf()
                * .lastIndexOf()
                * .toLowerCase()
                * .toUpperCase()
                * .endsWith(str)
                * .includes(str)
                * .startsWith(str)
                * .slice(from, to)
                * .localeCompare(str)
                * .substring(from, to)
                * .substr(from, length)
            * UTF-16 Methods
                * .charCodeAt();
                * .codePointAt();
                * String.fromCharCode();
                * String.fromCodePoint();
        * Numbers
            * Formats
                * 100
                * 1e4
                * 10000
                * 1e-6
                * 0.000001
                * 1_000_000
                * 0xff (255)
                * 0b101 (5)
            * Infinity & NaN
                * NaN === NaN
                * 60 / 0 = Infinity
                * 1e500 = Infinity (> 64 bits)
            * Methods
                * Number()

                * .toFixed()
                * .toString()

                * isNan()
                * isFinite()
                * parseInt()
                * parseFloat()

                * Math.pow()
                * Math.min()
                * Math.max()
                * Math.ceil()
                * Math.floor()
                * Math.round()
        * Boolean
  * Loops
            * for (con;con;con){
                // Code to be executed
             }
            * for (let i in {object}){
                // Code to be executed
             }
            * for (let i of 'string'/[array]){
                // Code to be executed
             }
            * while (con){
                // Code to be executed
             }
            * do{
                // Code to be executed
             } while (con);
  * Conditions
            * if (con){
                // Code to be executed
                } else if (con) {
                // Code to be executed
                 } else {
                // Code to be executed
                 }
            * switch (x){
                case A:
                    // Code to be executed
                    break;
                case B:
                case C:
                    // Code to be executed
                    break;
                default:
                    // Code to be executed
                    break;
                }
            * (condition) ? execute if true : execute if false;
  * Objects
            * Creating 
                * const myObject = {
                        key: 'value',
                    }
            * Accessing Properties
                * myObject.key
                * myObject['key']
                * for ... in
            * Adding Properties
                * myObject.new = 'newValue',
                * myObject['new'] = 'newValue',
            * Deleting Properties
                * delete myObject.key
                * delete myObject['key']
            * Comparing
                * myObject = copyObject (same object)
                * myObject === copyObject (true)
                * const newObject = {
                      key: 'value',
                  };
                  newObject === myObject (false)  
  * Arrays
        * Creating
            const array = [1, 2,];
        * Accessing
            * const[0]
            * for ... of 
        * Reassigning
            * array[0] = 'value'
        * Properties
            * .length
        * Methods
            * .pup()
            * .push()
            * .shift()
            * .slice()
            * .unshift()
            * .forEach()